from crewai import Task
from textwrap import dedent
from src.config.schema import JobList

class MotivationLetterTask():
    # def cv_analyst_task(self, agent, lebenslauf):
    #     return Task(
    #         description=dedent(f"""\
    #                 Read the CV content from {lebenslauf} and analyze the provided CV by reviewing the document carefully. 
    #                 Examine the document thoroughly to gather information about the individual's skills, job experiences, 
    #                 and educational background. Summarize these details succinctly in preparation for drafting a motivation letter. 
    #                 Ensure all information from the CV is captured accurately without redundancy. Focus on presenting a clear, 
    #                 fact-based summary of the qualifications."""),
    #         expected_output= dedent("""\
    #                 A structured list of job types suitable for the individual, based on the details outlined in their CV."""),
    #         agent = agent,
    #         output_file = "cv_summary.md"
    #     )

    def job_details(self, agent, job_details):
        return Task(
            description=dedent(f"""\
                    Use the tools to gathering the information for this {job_details} position. Extract valueable clearly and 
                    sumerize the information and put it as bullet point in the Json List"""),
            expected_output=dedent("""\
                    A JSON-formatted list of job openings job details. Each entry should include job title, 
                    company name, job description, and specific requirements, skill that needed."""),
            agent=agent,
            output_json= JobList
        )
    
    
    def motivation_letter_writter_task(self, agent, template, cv_details):
        return Task(
            description=dedent(f"""\
                    Create the motivation letter that relevant to the job, with the details form `job_details`. 
                    If template available, use this Template {template} to generate the motivation letter, dont copy the content like the job position and requirements, 
                    but USE SIMILAR TONE AND SIMILAR STYLE from that template.
                    Use the tools to open this job position, and gather the specific infomation for the motivation letter. 
                    The motivation letter should reflect the job's requirements AND the applicant's relevant qualifications as outlined in their CV,
                    check in this CV {cv_details} if any relevant skills and experience for this specific job, and include it if you find any. 
                    Ensure that each letter is specific to the job position, incorporating the correct company name, job title, and job requirements. 
                    Additionally, rewrite any URLs related to the job position to enhance sorting and relevance."""),
            expected_output= dedent("""\
                    Customized motivation letters that align the applicant's qualifications with the requirements of the job opening."""),
            agent = agent,
        )
    
    def motivation_letter_editor_task(self, agent, number):
        return Task(
            description=dedent(f"""\
                    Review and revise the motivation letter generated in the 'write_motivation_letter' task. 
                    Ensure the letter is of high quality and presents as if written by a human rather than generated by AI. 
                    Focus on enhancing readability, fluency, and personal touch to make the letter feel genuinely human-crafted."""),
            expected_output= dedent("""\
                    Refined and personalized motivation letters that effectively relate the applicant's qualifications to the job position, with a natural and human-like tone."""),
            agent = agent,
            output_file = f"motivation_letter_{number}.md"
        )
    